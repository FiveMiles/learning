appium action 使用方法

一、简单滑动方法
在appium中模拟用户滑动操作需要swipe方法
def swipe(self, start_x, start_y, end_x, end_y, duration=None):
    # swipe from one point to another point, for an optional duration

滑动解析：
1、水平滑动；   # 固定y轴，改变x值
2、垂直滑动；   # 固定x轴，改变y值；
3、任意方向滑动；# x，y同时变化

代码实现：
def get_size():
  return driver.get_window_size()


def swipe_slide():
  s_x = get_size().get('width')/2
  s_y = get_size().get('height') / 2
  e_x = s_x
  e_y = s_y + 800
  driver.swipe(s_x, s_y, e_x, e_y)
 
 
二、连续滑动操作
滑动一般是两点之间，连续滑动是是多点连续滑动操作。比如九宫格滑动、连续拖动图片移动等。
appium中使用TouchAction实现
TouchAction包含一系列操作，按压、长按、点击、移动、暂停。由这些不同操作可以组成一套动作。
导入模块
from appium.webdriver.common.touch_action import TouchAction

按压
press()
开始按压一个元素或坐标点(x,y),通过手指按压手机屏幕某个元素，也可以接收屏幕坐标；
press(self, el=None, x=None, y=None)
e:
TouchAction(driver).press(x=0, y=230)

长按
方法longPress()按压一个元素或坐标点(x,y)；
相比press()，longPress()多了一个入参duration，以毫秒为单位。1000ms表示1秒钟；用法与press()相同
longPress(self, el=None, x=None, y=None, duration=1000)

点击
tap()对一个元素或控件执行点击操作
tap(self, element=None, x=None, y=None, count=1)

移动
move_to()将指针从上一个点移动到指定的元素或点
move_to(self, element=None, x=None, y=None)

ps:
移动到目的位置有时是计算绝对坐标点，有时是基于前面一个坐标点的偏移量，要结合实际；

暂停
wait() 暂停脚本的执行，单位 毫秒
wait(self, ms=0)

释放
release()结束行动，取消屏幕上的指针
release(self)

执行
perform()把执行的操作发送到服务器；
perform(self)

TouchAction九宫格滑动操作：
TouchAction(driver).press(x=219, y=282).wait(1000).move_to(x=346, y=291).wait(1000) \
        .move_to(x=523, y=279).wait(1000) \
        .move_to(x=364, y=433).wait(1000) \
        .move_to(x=216, y=576).wait(1000) \
        .move_to(x=362, y=583).wait(1000) \
        .move_to(x=514, y=585).wait(1000) \
        .release().perform()


三、多手势操作

使用场景
地图类app对界面进行缩放，用appium模拟实现？

MultiAction
MultiAction()是多点触控的类，可以模拟用户多点操作。
主要包含add()和perform()方法。
MultiAction结合ActionTouch可以模拟出用户的多个手指滑动的操作效果；

导入库
from appium.webdriver.common.multi_action import MultiAction
from appium.webdriver.common.touch_action import TouchAction

加载
add(self, *touch_actions) 将TouchAction对象添加到MultiAction中，稍后再执行；

    参数：
touch_actions # 一个或多个TouchAction对象，描述一个手指要执行的动作链；

用法
a1 = TouchAction(driver)
a2 = TouchAction(driver)
a1.press(ele1).move_to(el2).release()
a2.press(ele2).move_to(el1).release()

MultiAction(driver).add(a1, a2)

执行：
perform(self)执行存储在对象中的操作
MultiAction(driver).add(a1, a2).perform()

ps:有点类似python中多线程和多进程的使用。

多点触控操作实战 -- 地图app缩放

代码实现
def get_size():
    size = driver.get_window_size()
    x = size.get('width')
    y = size.get('height')
    return x,y

def enlarge():
    x,y = get_size()
    print(x,y)
    
    action1 = TouchAction(driver)
    action2 = TouchAction(driver)
    add_action = MultiAction()
    action1.press(x=x*0.4, y=y*0.4).move_to(x=x*0.2, y=y*0.2).wait(1000).release()
    action2.press(x=x*0.6, y=y*0.6).move_to(x=x*0.8, y=y*0.8).wait(1000).release()
    add_action.add(action1, action2)
    add_action.perform
    
    
更多的用法，可以用adb实现

